# Generated by Django 4.1.4 on 2023-04-06 09:48

from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='administrator',
            fields=[
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                (
                'Employeeno', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='职工号')),
                ('password', models.IntegerField(default=0, null=True, verbose_name='密码')),
            ],
            options={
                'verbose_name': '管理员',
                'verbose_name_plural': '管理员',
                'db_table': 'administrator',
            },
        ),
        migrations.CreateModel(
            name='ComprehensiveDevelopment',
            fields=[
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('sno', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('physical', models.IntegerField(default=0, null=True, verbose_name='体育评分')),
                ('Volunteer', models.IntegerField(default=0, verbose_name='志愿活动评分')),
                ('Labor', models.IntegerField(default=0, verbose_name='劳务活动评分')),
                ('morality', models.IntegerField(default=0, null=True, verbose_name='思想道德评分')),
            ],
            options={
                'verbose_name': '综合发展',
                'verbose_name_plural': '综合发展',
                'db_table': 'ComprehensiveDevelopment',
            },
        ),
        migrations.CreateModel(
            name='Early_Warning',
            fields=[
                ('id', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('minimum', models.IntegerField(default=0, null=True, verbose_name='最低学分要求')),
                ('compulsory', models.IntegerField(default=0, null=True, verbose_name='必修课成绩')),
                ('elective', models.IntegerField(default=0, null=True, verbose_name='选修课成绩')),
                ('physical', models.IntegerField(default=0, null=True, verbose_name='体测成绩')),
                ('cet4', models.IntegerField(default=0, null=True, verbose_name='四级成绩')),
                ('mandarin', models.IntegerField(default=0, null=True, verbose_name='普通话成绩')),
            ],
            options={
                'verbose_name': '学业预警',
                'verbose_name_plural': '学业预警',
                'db_table': 'Early_Warning',
            },
        ),
        migrations.CreateModel(
            name='Innovation',
            fields=[
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('sno', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('ContestRating', models.IntegerField(default=0, verbose_name='竞赛评分')),
                ('PatentRcoring', models.IntegerField(default=0, verbose_name='专利评分')),
                ('EntrepreneurialAchievement', models.IntegerField(default=0, verbose_name='创业成果评分')),
            ],
            options={
                'verbose_name': '创新创业',
                'verbose_name_plural': '创新创业',
                'db_table': 'Innovation',
            },
        ),
        migrations.CreateModel(
            name='Knowledge',
            fields=[
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('sno', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('java', models.IntegerField(default=0, null=True, verbose_name='java课程')),
                ('dataStructure', models.IntegerField(default=0, null=True, verbose_name='数据结构')),
                ('Gaverage', models.FloatField(default=0, null=True, verbose_name='平均绩点')),
            ],
            options={
                'verbose_name': '知识学习',
                'verbose_name_plural': '知识学习',
                'db_table': 'Knowledge',
            },
        ),
        migrations.CreateModel(
            name='majorTechnology',
            fields=[
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('sno', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('ProjectPractice', models.IntegerField(default=0, null=True, verbose_name='项目实践')),
                ('PaperGrading', models.IntegerField(default=0, verbose_name='论文评分')),
                ('StudentTutor', models.IntegerField(default=0, null=True, verbose_name='学生导师评分')),
            ],
            options={
                'verbose_name': '专业技术',
                'verbose_name_plural': '专业技术',
                'db_table': 'majorTechnology',
            },
        ),
        migrations.CreateModel(
            name='manage',
            fields=[
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('sno', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('community', models.IntegerField(default=0, verbose_name='社团工作评分')),
                ('StudentWork', models.IntegerField(default=0, verbose_name='学生工作评分')),
                ('ProjectTeam', models.IntegerField(default=0, null=True, verbose_name='项目团队评分')),
            ],
            options={
                'verbose_name': '管理实践',
                'verbose_name_plural': '管理实践',
                'db_table': 'manage',
            },
        ),
        migrations.CreateModel(
            name='responsible',
            fields=[
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                (
                'Employeeno', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='职工号')),
                ('password', models.IntegerField(default=0, null=True, verbose_name='密码')),
            ],
            options={
                'verbose_name': '负责人',
                'verbose_name_plural': '负责人',
                'db_table': 'responsible',
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('zy', models.IntegerField(default=0, null=True, verbose_name='专业技术能力')),
                ('cx', models.IntegerField(default=0, null=True, verbose_name='创新创业能力')),
                ('zs', models.IntegerField(default=0, null=True, verbose_name='知识学习能力')),
                ('gl', models.IntegerField(default=0, null=True, verbose_name='管理实践能力')),
                ('zh', models.IntegerField(default=0, null=True, verbose_name='综合发展能力')),
            ],
            options={
                'verbose_name': '评分',
                'verbose_name_plural': '评分',
                'db_table': 'Score',
            },
        ),
        migrations.CreateModel(
            name='shenhe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('no', models.IntegerField(default=0, null=True, verbose_name='学号')),
                ('miaoshu', models.CharField(max_length=200, null=True, verbose_name='材料描述')),
                ('leibie', models.CharField(max_length=200, null=True, verbose_name='材料类别')),
                ('image', models.ImageField(default=0, null=True, upload_to='', verbose_name='材料图片')),
                ('zhuangtai', models.CharField(choices=[('T', '通过'), ('F', '不通过'), ('D', '待审核')], default='D',
                                               max_length=200, verbose_name='状态')),
            ],
            options={
                'verbose_name': '审核',
                'verbose_name_plural': '审核',
                'db_table': 'shenhe',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='学号')),
                ('name', models.CharField(max_length=200, null=True, verbose_name='姓名')),
                ('age', models.IntegerField(default=0, null=True, verbose_name='年龄')),
                ('sp', models.CharField(max_length=200, null=True, verbose_name='专业')),
                ('pwd', models.IntegerField(default=123456, verbose_name='密码')),
            ],
            options={
                'verbose_name': '学生',
                'verbose_name_plural': '学生',
                'db_table': 'Student',
            },
        ),
        migrations.AddConstraint(
            model_name='score',
            constraint=models.CheckConstraint(check=models.Q(('zy__gte', 0), ('zy__lte', 100)), name='zy'),
        ),
        migrations.AddConstraint(
            model_name='score',
            constraint=models.CheckConstraint(check=models.Q(('cx__gte', 0), ('cx__lte', 100)), name='cx'),
        ),
        migrations.AddConstraint(
            model_name='score',
            constraint=models.CheckConstraint(check=models.Q(('zs__gte', 0), ('zs__lte', 100)), name='zs'),
        ),
        migrations.AddConstraint(
            model_name='score',
            constraint=models.CheckConstraint(check=models.Q(('gl__gte', 0), ('gl__lte', 100)), name='gl'),
        ),
        migrations.AddConstraint(
            model_name='score',
            constraint=models.CheckConstraint(check=models.Q(('zh__gte', 0), ('zh__lte', 100)), name='zh'),
        ),
        migrations.AddConstraint(
            model_name='manage',
            constraint=models.CheckConstraint(check=models.Q(('community__gte', 0), ('community__lte', 100)),
                                              name='community'),
        ),
        migrations.AddConstraint(
            model_name='manage',
            constraint=models.CheckConstraint(check=models.Q(('StudentWork__gte', 0), ('StudentWork__lte', 100)),
                                              name='StudentWork'),
        ),
        migrations.AddConstraint(
            model_name='manage',
            constraint=models.CheckConstraint(check=models.Q(('ProjectTeam__gte', 0), ('ProjectTeam__lte', 100)),
                                              name='ProjectTeam'),
        ),
        migrations.AddConstraint(
            model_name='majortechnology',
            constraint=models.CheckConstraint(
                check=models.Q(('ProjectPractice__gte', 0), ('ProjectPractice__lte', 100)), name='ProjectPractice'),
        ),
        migrations.AddConstraint(
            model_name='majortechnology',
            constraint=models.CheckConstraint(check=models.Q(('PaperGrading__gte', 0), ('PaperGrading__lte', 100)),
                                              name='PaperGrading'),
        ),
        migrations.AddConstraint(
            model_name='majortechnology',
            constraint=models.CheckConstraint(check=models.Q(('StudentTutor__gte', 0), ('StudentTutor__lte', 100)),
                                              name='StudentTutor'),
        ),
        migrations.AddConstraint(
            model_name='knowledge',
            constraint=models.CheckConstraint(check=models.Q(('java__gte', 0), ('java__lte', 100)), name='java'),
        ),
        migrations.AddConstraint(
            model_name='knowledge',
            constraint=models.CheckConstraint(check=models.Q(('dataStructure__gte', 0), ('dataStructure__lte', 100)),
                                              name='dataStructure'),
        ),
        migrations.AddConstraint(
            model_name='knowledge',
            constraint=models.CheckConstraint(check=models.Q(('Gaverage__gte', 0), ('Gaverage__lte', 5)),
                                              name='Gaverage'),
        ),
        migrations.AddConstraint(
            model_name='innovation',
            constraint=models.CheckConstraint(check=models.Q(('ContestRating__gte', 0), ('ContestRating__lte', 100)),
                                              name='ContestRating'),
        ),
        migrations.AddConstraint(
            model_name='innovation',
            constraint=models.CheckConstraint(check=models.Q(('PatentRcoring__gte', 0), ('PatentRcoring__lte', 100)),
                                              name='PatentRcoring'),
        ),
        migrations.AddConstraint(
            model_name='innovation',
            constraint=models.CheckConstraint(
                check=models.Q(('EntrepreneurialAchievement__gte', 0), ('EntrepreneurialAchievement__lte', 100)),
                name='EntrepreneurialAchievement'),
        ),
        migrations.AddConstraint(
            model_name='early_warning',
            constraint=models.CheckConstraint(check=models.Q(('minimum__gte', 0), ('minimum__lte', 170)),
                                              name='minimum'),
        ),
        migrations.AddConstraint(
            model_name='early_warning',
            constraint=models.CheckConstraint(check=models.Q(('compulsory__gte', 0), ('compulsory__lte', 100)),
                                              name='compulsory'),
        ),
        migrations.AddConstraint(
            model_name='early_warning',
            constraint=models.CheckConstraint(check=models.Q(('elective__gte', 0), ('elective__lte', 100)),
                                              name='elective'),
        ),
        migrations.AddConstraint(
            model_name='early_warning',
            constraint=models.CheckConstraint(check=models.Q(('physical__gte', 0), ('physical__lte', 100)),
                                              name='physical'),
        ),
        migrations.AddConstraint(
            model_name='early_warning',
            constraint=models.CheckConstraint(check=models.Q(('cet4__gte', 0), ('cet4__lte', 750)), name='cet4'),
        ),
        migrations.AddConstraint(
            model_name='early_warning',
            constraint=models.CheckConstraint(check=models.Q(('mandarin__gte', 0), ('mandarin__lte', 100)),
                                              name='mandarin'),
        ),
        migrations.AddConstraint(
            model_name='comprehensivedevelopment',
            constraint=models.CheckConstraint(check=models.Q(('physical__gte', 0), ('physical__lte', 100)),
                                              name='physical_1'),
        ),
        migrations.AddConstraint(
            model_name='comprehensivedevelopment',
            constraint=models.CheckConstraint(check=models.Q(('Volunteer__gte', 0), ('Volunteer__lte', 100)),
                                              name='Volunteer'),
        ),
        migrations.AddConstraint(
            model_name='comprehensivedevelopment',
            constraint=models.CheckConstraint(check=models.Q(('Labor__gte', 0), ('Labor__lte', 100)), name='Labor'),
        ),
        migrations.AddConstraint(
            model_name='comprehensivedevelopment',
            constraint=models.CheckConstraint(check=models.Q(('morality__gte', 0), ('morality__lte', 100)),
                                              name='morality'),
        ),
    ]
